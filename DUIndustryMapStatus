{"slots":{"0":{"name":"core","type":{"events":[],"methods":[]}},"1":{"name":"screen","type":{"events":[],"methods":[]}},"2":{"name":"screen2","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"coresz = 0\nsh= 5 --export sticker height\ncm = core.getElementMassById(1)\nsystem.print(cm)\nif cm<100 then coresz = 16 end\nif cm>100 and cm<1000 then coresz = 32 end\nif cm>1000 and cm<5000 then coresz = 64 end\nif cm>5000 then coresz = 128 end\nelementlist = core.getElementIdList()\ncount = 0\nindustryfilter=false --export\nelems = \"\"\ndyn = ''\ndyn = [[coresz = ]]..coresz..[[\n\nelm = {\n\n]]\n\nfor i, v in ipairs(elementlist) do\n    --if core.getElementTypeById(v) == \"Dynamic Core Unit\" then system.print(core.getElementMassById(v)..','..core.getElementNameById(v)..','..v) end\n    local pos =  vec3(core.getElementPositionById(v))\n    if (string.find(core.getElementIndustryStatus(v), \"JAMMED\") ~= nil) then\n        core.spawnArrowSticker(pos.x,pos.y, pos.z+sh, \"down\")\n        end\n    if string.len(core.getElementIndustryStatus(v)) >2 and industryfilter==true and (string.find(core.getElementIndustryStatus(v), \"JAMMED\") == nil)  then\n    dyn = dyn..[[{x=]]..math.floor(pos.x*10)..[[,y=]]..math.floor(pos.y*10)..[[,z=]]..math.floor(pos.z*10)..[[,s=0},]]\n    elseif string.len(core.getElementIndustryStatus(v)) >2 and (string.find(core.getElementIndustryStatus(v), \"JAMMED\") ~= nil) then\n    dyn = dyn..[[{x=]]..math.floor(pos.x*10)..[[,y=]]..math.floor(pos.y*10)..[[,z=]]..math.floor(pos.z*10)..[[,s=1},]]   \n    elseif industryfilter==false then\n    dyn = dyn..[[{x=]]..math.floor(pos.x*10)..[[,y=]]..math.floor(pos.y*10)..[[,z=]]..math.floor(pos.z*10)..[[,s=0},]]    \n    end\nend\ndyn = dyn..[[\n}]]\nscreen.setRenderScript(rs..dyn..rs2)\n\n\n\n    ","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"rs = [[font = loadFont('RobotoMono-Bold', 32)\nrx, ry = getResolution()\ncx, cy = getCursor()\nclick = getCursorPressed()\nsetBackgroundColor(0, 0, 0)\nmg = 5\n\nif not init then\n\n--Layer Create with Defaults\n    function createLayerDefaults(lr, lg, lb, la, fr, fg, fb, fa, shw, sw)\n        local layer = createLayer()\n        setDefaultFillColor(layer, Shape_Box, fr, fg, fb, fa)\n        setDefaultShadow(layer, Shape_Box, shw, fr, fg, fb, fa)\n        setDefaultStrokeColor(layer, Shape_Box, lr, lg, lb, la) \n        setDefaultStrokeWidth(layer, Shape_Box, sw)\n\n        setDefaultFillColor(layer, Shape_BoxRounded, fr, fg, fb, fa)\n        setDefaultShadow(layer, Shape_BoxRounded, shw, fr, fg, fb, fa)\n        setDefaultStrokeColor(layer, Shape_BoxRounded, lr, lg, lb, la) \n        setDefaultStrokeWidth(layer, Shape_BoxRounded, sw)\n\n        setDefaultFillColor(layer, Shape_Circle, fr, fg, fb, fa)\n        setDefaultShadow(layer, Shape_Circle, shw, fr, fg, fb, fa)\n        setDefaultStrokeColor(layer, Shape_Circle, lr, lg, lb, la) \n        setDefaultStrokeWidth(layer, Shape_Circle, sw)\n\n        setDefaultFillColor(layer, Shape_Polygon, fr, fg, fb, fa)\n        setDefaultShadow(layer, Shape_Polygon, shw, fr, fg, fb, fa)\n        setDefaultStrokeColor(layer, Shape_Polygon, lr, lg, lb, la) \n        setDefaultStrokeWidth(layer, Shape_Polygon, sw)\n\n\n        setDefaultShadow(layer, Shape_Line, shw, fr, fg, fb, fa)\n        setDefaultStrokeColor(layer, Shape_Line, lr, lg, lb, la) \n        setDefaultStrokeWidth(layer, Shape_Line, sw)\n\n        setDefaultFillColor(layer, Shape_Text, lr, lg, lb, la)\n        return layer\n    end\n    function drawWindows(boxes)\n        for i,v in ipairs(boxes)do\n            addBoxRounded(v.l,v.x,v.y,v.w,v.h,v.r)\n            if v.c then\n                addCircle(v.l,v.x+v.w/2,v.y+v.h/2, 1)\n            end\n        end\n    end\n function drawWindowContent(windows, content)\n        for k,w in ipairs(win) do\n            for i, v in ipairs(elm) do\n                local l = \"\"\n                if v.s == 0 then l=layer1 elseif v.s == 1 then l = layer2 end\n                if w.t == 'top' then\n                    addCircle(l,w.x+w.w*(v.x/10+coresz/2)/coresz,w.y+w.h-w.h*(v.y/10+coresz/2)/coresz,4)\n                elseif w.t == 'side' then\n                    addCircle(l,w.x+w.w*(v.y/10+coresz/2)/coresz,w.y+w.h-w.h*(v.z/10+coresz/2)/coresz,4)\n                elseif w.t == 'front' then\n                    addCircle(l,w.x+w.w*(v.x/10+coresz/2)/coresz,w.y+w.h-w.h*(v.z/10+coresz/2)/coresz,4)\n                end\n            end\n        end\n    end \nend\n\n--initiate test\nlayer0 = createLayerDefaults(1,1,1,1,0,0,0,0,5,2)\nlayer1 = createLayerDefaults(0,1,0,1,0,0,0,0,5,1)\nlayer2 = createLayerDefaults(1,0,0,1,1,0,0,1,5,2)\nlayer3 = createLayerDefaults(1,1,0,1,1,1,0,.5,5,2)\nwin = {}\ntable.insert(win,{l=layer0,x=mg,y=ry-rx/3,w=rx/3-2*mg,h=rx/3-2*mg,r=5,c=true,t='top'})\ntable.insert(win,{l=layer0,x=rx/3+mg,y=ry-rx/3,w=rx/3-2*mg,h=rx/3-2*mg,r=5,c=true,t='side'})\ntable.insert(win,{l=layer0,x=2*rx/3+mg,y=ry-rx/3,w=rx/3-2*mg,h=rx/3-2*mg,r=5,c=true,t='front'})\ndrawWindows(win)\n]]\n\nrs2 = [[\n\n\ndrawWindowContent(win,elm)\n\nrequestAnimationFrame(5)\n]]","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"1"}],"methods":[],"events":[]}
